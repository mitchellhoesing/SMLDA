id,year,text
1,1989,abstract use GOMS model predict error rate mental time translate financial concept equation widely interface representation common spreadsheet package characterize non mnemonic name absolute referencing variable second common nonprocedural command drive software characterize mnemonic name convention relative referencing variable prediction test experiment experience financial analyst interface allow mnemonic relative name call keyword take long overall produce seventy percent few simple error require mental effort give overall cost error financial model conclude interface have keyword representation far superior introduction recur prescription user interface design state interface use term display fit object action user mental representation translate think action take time produce error interface require significant translation user mental representation expect increase mental time error Card Moran Newell analyze skilled user text editing software translate task perform action system similar analysis routine component computer aid circuit design research demonstrate user break task small unit approximately 10330 second show user performance text edit routine component circuit design similar term error frequency command execution time concept different kind interface representation warrant research show interface feature affect performance skilled financial model builder Performance measure term execution time frequency simple conceptual error research execute step 1 Task Analysis task building financial model characterize break essential operation independent give package characterization evident importance describe cell refer formula different type cell type different combination inside common financial formula order represent special time relationship generic financial variable 2 Analysis Interface Representations common interface design ifps Lotus 1 2 3 analyze difference refer cell formula key difference mnemonic constraint cell naming convention cell refer relative absolute location 3 Cognitive Modeling GOMS model build represent step skilled financial model builder likey follow writing model formula cognitive model serve basis make prediction relative frequency error cell type different representation predict explain mental time need translate financial concept formulas 4 Performance Evaluation conduct experiment 31 experience user financial modeling system compare performance prediction financial modelling system eg spreadsheet package business modeling system financial modeler etc second utilize end user software package business word processor claim frequently senior executive analysis cost translate financial TASK analysis basic structure financial modeling system dimensional matrix1 Model builder typically use dimension usually column represent time period row represent financial variable category cost revenue process building model basically package 1 Rows variable column time period label produce grid cell 1some package allow add dimension order include different business unit product sale region etc 2 content cell grid specify cell contain numerical value formula Formulas reference content ofother cell include mathematical andor logical operator numerical constant formula reference cell column formula reside example formula represent relationship show require cell reference column Assetst Current Assetst Fixed Assetst Profit t1 t revenue t1tcost t1 t Notice relationship represent different concept time equation show relationship variable give time t call level variable second show relationship event period time call flow variable financial relationship mix level flow formula represent relationship likely include cell column important distinction financial planner income flow cash flow income flow result accrual basis accounting view revenue recognize transaction relate earning process occur sale service render attempt match expense associate revenue method produce good estimate profitability firm period time provide information cash flow income flow revenue occur receipt cash timing cash flow crucial decision allocation acquisition fund income flow important assess profitability cash flow indispensable perform sound financial planning include financial model confuse beginning analyst present mental burden experience example timing difference income flow cash flow Receipts t1 t 2revenue t3t2 8revenue t2t1 formula represent equation refer cell different column different row respect cell equation reside time time lag income flow cash flow formula include cell different row column difficult think represent basic task financial planning difficult specify current software research show degree difficulty planner referencing cell formula relate kind cell row column different row column refer type type sr type SC type DRC research show cell available planner software package interface add user task difficulty interface representation References content cell cell reference specify represent different cell naming convention main difference cell naming convention financial modeling system Mnemonic name vs non mnemonic name relative reference vs absolute reference Mnemonic cell naming use variable REVENUES COSTS specify row Non mnemonic cell naming use row number absolute reference state position cell overall coordinate relative reference specifie position cell describe location respect cell formula reside cell naming convention result combine cell naming dimension figure 1 show example revenues 1 costs 2 profit 3 4 Year 1 year 2 B J Mnemonic Absolute REVENUES 1 relative PREVIOUS REVENUES Non mnemonic A1 C1R2 Figure 1 cell naming convention refer cell Revenues Year 1 arrow head reside Profit Year 2 arrow foot research investigate name convention widely financial modeling system ifps Interactive Financial Planning System embody relative mnemonic cell naming convention call keyword Lotus 12n3 use absolute non mnemonic cell naming call positional package exhibit difference style interaction eg command language vs direct manipulation user performance respect cell referencing study COGNITIVE MODELS step work involve build GOMS model simulate skilled performance model build observe experienced financial analyst pilot study study participant ask think aloud build typical financial planning model pilot study model building behavior occur general phase acquisition appropriate information translation information formula interface representation skilled financial analyst exhibit type problem solve behavior acquisition information behavior independent interface representation acquisition process occur representation utilize problem acquisition phase refer conceptual error performance evaluation section translation phase mental effort cost translate financial concept formula affect different interface representation GOMS model draw pilot study specify different sequence mental operation representation study example task execute representation show figure 2 fledge GOMS model discuss error cause overload work memory expect correlate peak work memory load call overload error prediction assume peak number work memory resource utilize get close limit likelihood error behavior increase error hypothesis build compare peak work memory load different cell type representation figure 3 show work memory load cell type SC DRC keyword representation execute GOMS model figure 2 GOAL WRITE OPERATOR CELL Keyword Naming GOAL WRITE OPERATOR CEIL GOAL ACQUIRE information ABOUf CEIL SPECIFY information pointer SPECIFY OPERATOR WRITE OPERATOR jf require SPECIFY VARIABLE goal write LAG SPECIFY LAG POINTER SPECIFY KEYWORD WRITE LAG KEYWORD WRITE VARIABLE Jag Positional Naming GOAL WRITE OPERATOR CEIL GOAL ACQUIRE information ABOUf CEIL SPECIFY information pointer SPECIFY OPERATOR WRITE OPERATOR jf require SPECIFY VARIABLE goal write COLUMN Sel GOAL COLUMN specify COLUMN write COLUMN GOAi CALCULATE COLUMN SPECIFY LAG POINTER calculate column write COLUMN SPECIFY ROW NUMBER WRITE ROW number ifno lag Jag Figure 2 GOAL WRTIE OPERATOR CEIL execution GOMS model translate information internal representation financial problem cell type SC DRC Figure 2 show positional representation require step keyword representation model builder perform extra step order translate variable name cell coordinate performance prediction translation process GOMS model 1 mental time execute error free equation estimate simply count number mental operation require cell reference 2 frequency simple Keyword Naming Cell type SC    1    Operetor Pointer Pointer VarName Pointer VerName r Time Cell Type DRC     Kevord Et S Log    Log    Kevrd tl t 1 Operator VorNome VorName VorNome Pointer Pointer Pointer Pointer Pointer VorNemef Figure 3 Working Memory Loads Cell Types SC DRC Keyword Representation horizontal axis chart represent time interval represent length time interval choose represent content work memory change vertical axis show rough estimation number piece information keep work memory translate concept formula symbol goal keep work memory cell type Figure 3 show cell type DRC great demand work memory cell type SC expect high overload error rate DRC SC keyword representation model builder remember translate concept time lag formula writing cell type DRC prediction GOMS model overload error rate show Figure 4 similar prediction error free mental time detail detailed task analysis cell type interface number step require expect correlate time spend perform task Overload Error Rates Predictions Positional Narnini Keyword Namini Type SR Type SC Type SR Type DRC Type SR Type DRC Type SR Type SC Type SR Type DRC Type SC Type DRC representation Positional Type SR Keyword Type SR Positional Type SC Keyword Type SC Positional Type DRC Keyword Type DRC support empirical result Figure 4 Overload Error Rates prediction sum expect subject keyword interface few overload error need mental time subject positional interface additional translation effort require positional representation contrast execution time keyword subject expect long subject require write character similar mental effort estimation find Olson Nilsen study cell reference positional style spreadsheet package show substantially mental effort require pointing cell oppose calculate coordinate research expand essence result make time error prediction base estimation mental effort involve incorporate characteristic task building financial model estimation performance evaluation core comparison performance user keyword base interface versus user positional base interface Keyword subject experience FPS user positional subject experience Lotus 12s3 user subject ask write equation different cell type combination length equation restrict equation contain cell reference subject Thirty experience user firm serve volunteer subject subject work fulltime Fortune 500 financial industrial firm Michigan Ohio participate organization ask individual follow experience year work accounting finance organization b year Lotus 12i3 FPS subject Lotus user positional keyword user FPS Lotus user average experience 73 year accounting finance FPS user 63 subject year experjence respective package ninety percent subject report package twice week remainder recently promote supervisory position Practice Test Problems subject ask solve problem pencil paper eliminate difference interactive style present package subject read description problem aloud instruction booklet give summary datum model skeleton summary datum detail input datum building model model skeleton worksheet label column row row participant write miss equation datum practice problem test problem 24 row Procedure experimental session hour half long consist oral instruction practice problem test problem test write speed questionnaire experimental session videotape test practice problem subject read description problem objective building financial model pick model skeleton summary datum ask write variable time avoid jump row row problem subject give feedback solution write speed test administer control difference subject write speed test subject ask write correct answer test problem copy sheet paper listening transcribing item tape additional experimental control background datum subject collect RESULTS DISCUSSION Errors Errors classify judge category overload error forget cell reference misremember cell conceptual error specify overall formula incorrectly 120 error judge fall category include analysis 115 remammg error 53 overload error 62 conceptual predict interface representation impact overload error rate p01 conceptual error p96 analysis variance logit transformation error rate overload conceptual error result provide support claim conceptual error expect occur translation interface representation start contrast frequency overload error positional subject 45 time great keyword subject 59 vs 13 conceptual error 54 vs 42 Figure 5 show distribution type error cell type interface representation overload error cell type DRC error prone SR SC predict p05 p01 Tukey Kramer test contrary expectation significant difference SR SC cause result discuss misassumption GOMS model effort require reusing piece information early step interaction cell type interface representation p20 mean cell difficult translate representation difficult finally difference error frequency representation cell type highly significant SC p01 slightly significant SR p10 significant DRC predict cognitive model show Figure 4 Percentage Errors Overload Errors ISR 8 DFC Positional 81 Keyword Conceptual Errors Percentage Errors ISR 8 DR rmPositional Keyword Figure 5 Overload Conceptual Error Rates conceptual error cell type SC significantly low error rate type SR DRC p01 task analysis show cell column type SC represent straightforward relationship level flow variable hand cell type DRC require formula represent time lag cell type SR include formula mix level flow formula involve recursion expect conceptual difficulty occur formula include complex financial relationship interface representation affect conceptual process execute translation expect interaction representation cell type conceptual error contrary reasoning low graph figure 5 show strong interaction cell type representation conceptual error interaction explain interface feature package experiment IFPS encourage user think term recursion automatically propagate formula explain frequency conceptual error small positional subject type SR usually recursive formula hand IFPS make difficult write equation cell type DRC encourage recursive thinking conceptually difficult formulate single equation initial steady state condition explain IFPS subject conceptual problem DRC compare Lotus user Times execution time formula reference 7 35 second representation time similar unit task time find card et al study text editing circuit design figure 6 show average time need execute cell reference representation execution time long keyword representation time spend writing write interested total time mental effort involve representation calculate mental time subtract execution time raw writing time estimate separate writing speed test result positional representation force skilled financial analyst spend little 50 time mental operation versus 20 keyword notation Average Time Cell sec Writing Mental Positional 38 39 Keyword 89 22 total 111 Figure 6 Error Free Execution Times General Statistics Mental time formula cell reference 1 10 second keyword representation 3 22 second positional notation mental time spend cell type estimate regress total mental time formula number cell type formula result figure 7 large difference mental effort require cell type representation support hypothesis generate GOMS model Mental Times Regression coefficient standard error Positional Keyword Long SR Short SR SC DRC R2 N 334 38 209 12 925 53 490 96 125 75 116 19 488 72 figure 7 Mental Times important clarify keyword representation method write cell type SR short method user write keyword eg PREVIOUS long method keyword variable specify mental time method indicate GOMS model predict time error variation task accurately represent finally mental time cell reference type representation high correspondence overload error frequencie conceptual error rate explain speculate financial model building long mental time associate increase effort high memory load break produce simple error Figure 8 show overload error rate mental time logarithmic scale IO Mental Time    Overload Error Rate 100 gTime sec 10 0 0 error 01    01 Lotus Lotus Lotus    ifps    ifps    ifps    SR S CFC SR S CFC mental time rate IFPS sr composite short sr long SR comparable mental time overload error rate cell reference Figure 8 Overload Error Rates vs Mental Times conclusion Interface design decision grave consequence effort involve difficult mental woik suppose easy software particular find financial modeling system interface require user calculate cell coordinate impose mental workload produce error increase time attribute mental effort total time enter mnemonic cell reference long time involve hard work take account cost error time correct error intangible cost undetected error keyword representation consider far superior second far reach outcome research demonstration GOMS model formalism useful predict time error performance illustrate potential interface design user interface representation build GOMS model abstraction common property design financial modeling system readily represent decision unbuilt software result experiment confirm cognitive load prediction GOMS model support worth analysis method evaluate design decision difference exist software package finally research paper extend application GOMS model highly complex problem solve task demonstrate apply routine cognitive portion task provide insight user internal problem representation interact external constraint software package acknowledgement research support University Michigan Rackham Grant author like thank Alan G Merten Raymond R Reilly J Frank Yates valuable comment suggestion execution research Special thank financial planner take study purely voluntary basis finally thank Diane L Morrow Lerch help datum recording analysis
2,1987,abstract animation system develop generate animation story write natural language system consist module story understand module stage direct module action generating module story understand module extract action explicitly describe story make scenario stage directing module adapt scenario determine actor position stage set stage actor define 3 dimensional articulated figure component actor primitive motion method achieve complicated action primitive motion combine refer complicated action action generating module produce animate sequence adapt scenario module tightly couple knowledge basis example story Hare Tortoise Aesops Fables write elementary schoolchildren example prove possible produce computer animation directly story write natural language Japanese Key Words computer animation natural language story understand truth maintenance system stage direct motion generating object orient programming constraint propagation 1 introduction recent advance computer graphic technology enable computer animation conventional CAD commercial film movie kind application high level language development language S programming language hard untrained people use encourage widespread use computer animation easy touse computer animation system develop natural language meaning everyday language provide easy touse man machine interface computer novice allow ambiguous description abridgement research currently conduct different area natural language processing eg machine translation general end question answer paraphrasing etc research effort aim understand idea word case produce computer animation story write natural language situation different animation system output consist action sequence necessary understand current action necessarily writer thought reason portray story paper describe Story Driven Animation System sdas generate animation story write natural language distinct conventional computer animation system sdas provide easy touse man machine interface computer novice useful produce animation story write natural language 2 Animation Natural Language produce animation natural language story problem solve 1 Extract description action story 2 Adapt scenario 3 Generate action scenario word related action extract sentence sufficient animation story describe precisely action describe story detail movement hare leg leave right basis concept ridiculous write story essential accurate animation necessary find hidden action word background knowledge common sense order actor stage story adapt animation precisely describe scenario generate action action combination example sequential simultaneous synchronous asynchronous etc impossible provide possible action combination scheduling mechanism require produce desire action 3 System Configuration consider description section describe sdas configuration system consist module show fig1 module extract mean story produce scenario second module direct output story understanding module produce adapt scenario module generate action graphic display record video tape story understanding module implement Prolog Prolog suitable language natural language processing stage directing module use empirical knowledge direction style knowledge representation suitable stage directing implement Prolog action generating module implement flavor object orient Lisp package module sense program generator Lisp capability create new function evaluate dynamically important action consider combination primitive motion object orient programming method suitable action generation 31 Story Understanding conventional technique natural language processing eg machine translation general ends treat input story sentence sentence basis order produce animation discourse analysis essential discourse analysis technique propose Story Story understand Dictionary Stage direct Knowledge base Action generate Action library Animation Fig1 sdas configuration paraphrasing story formalization strongly domain dependent follow restriction input story domain independent discourse analysis technique realize input story restrict children story primary schoolchildren restriction mean 1 ambiguous ie pronoun ellipsis etc seldom see 2 sentence appear time sequence sentence describe situation action story understanding consist inference engine knowledge base store datum human action dictionary contain meaning require understand natural language discourse analysis action perform sentence process ie morpheme syntactic semantic analysis situation change accord time lapse express collection assertion particular time story assertion represent snapshot story collection assertion state include time location fix maintain continuity adjoining collection assertion ascertain consistency collection assertion follow process apply accord situation extant specific time l inheritance let consider follow sentence input tortoise start run Kicking dust tortoise run tortoise hurried walking raise sweat begin tortoise run ordinary manner soon run kick dust run kick dust sweat reason deny assertion tortoise kick dust run assertion inherit succeed collection tortoise run tortoise run tortoise kick dust tortoise run tortoise kick dust tortoise sweat fig2 inheritance example assertion explicit description assertion Fig 2 2 deletion action complete finish mention input sentence explicitly action bring halt inference subsequent sentence example tortoise arrive mountain collection assertion correspond sentence keep assertion tortoise arrive goal tortoise state tortoise stop run tortoise sweat assertion inherit precede collection assertion assertion tortoise kick dust eliminate tortoise stop run state process achieve Truth Maintenance Mechanism base dictionary contain knowledge kick dust contradict state Fig 3 3 Interpolation continuity adjoining collection assertion check affirm new assertion add collection assertion affirm interpolation carry retain continuity collection assertion let consider follow sentence hare run hare lie grass hare state lie grass precede collection assertion show hare run Backward Reasoning interpolate action hare stop force hare state interpolation satisfy precondition action Fig 4 4 assumption base reasoning require information explicitly describe input story assumption example sky exist background input story sky case assumption sky clear new assertion deny assumption find Truth Maintenance Mechanism eliminate assumption kind reasoning produce precisely describe scenario ie action sequence actor story understanding implement combine kind reason knowledge representation 32 Stage Directing Stage directing module produce precisely adapt scenario base output story understanding module story divide scene collection assertion story understanding represent action actor location Collections assertion merge scene accord continuity place actor action continuity time place actor adjoining collection assertion maintain collection assertion belong different scene scene location assign actor simple heuristic rule example people meet come left come right meet center stage stage setting carry time stage setting mean draw sky mountain tree grass Figure 5 show scene story Hare Tortoise scene follow sentence represent hare tortoise meet field stage directing module make stage blue sky green mountain background ground brown meet field tree tortoise run tortoise kick dust tortoise sweat     nte tmtoise miw Ifie tot wise kick tif1 W5 t tortoise sweat tortoise stop fig3 deletion example hare run l Thehar    estop ithe hare lie ground fig4 action interpolation example grass scatter hare leave stage tortoise right walk center stage stop 33 Action Generating Actions generate base scenario story understanding module stage directing module major issue Model Description define 3 dimensional model actor Motion Description define motion actor 1 Model Description model description language implement flavor object orient Lisp package model define object advantage class inheritance relation message pass mechanism flavor provide actor define articulated figure consist bone joint Bones datum contain information shape coupling joint Joints datum contain information coupling bone angle bone connect bone joint produce different figure figure represent tree structure node correspond bone arc correspond joint bone joint define combined form figure fig6 show example model definition define arm fig5 scene story Hare Tortoise definefigure arm upperbone lowerbone handbone hand scale 03 elbowjointl wristjoint2 link elbow vl upper pl link elbow v2 low p2 link wrist vl low pl link wrist v2 hand p2 class super class instance upperclass bone scale 03 instance elbowclass jointl connect joint bone 2 Motion Description motion description language implement flavor hierarchy primitive motion define module combination module complicated motion primitive motion change joint angle cause rotation bone end bone change location rotate bone connected bone location change propagate movement hierarchy realize propagation constraint propagation mechanism employ Constraints set bone end directly connect model definition change joint angle primitive motion complicated motion define hierarchical combination primitive motion combine time relation action set timing relation express predicate describe time relation sequential parallel repetitive predicate set timing constraint action synchronize action constraint propagation mechanism timing relation action give story sufficient define animation indicate qualitative relation event drive scheduling mechanism apply assign concrete value animation clock action dynamically example action start action b complete sequential constraint propagation path set variable action start time action bs terminate time action b complete global clock value set action start time constraint propagation path Fig 7 constraint propagation mechanism set action timing dynamically indirect description time scenario motion description language describe primitive motion combine motion like walk highly complicated motion like walk look talk manner step recording animation video tape time consuming process calculate joint coordinate frame key frame calculate frame interpolate key frame frame record VTR frame frame basis start B I31 start end fig6 model description example fig7 sequential action time chart 4 Conclusion animation system develop produce animation story write natural language system module story understand module stage direct module action generating module Based action story understand accomplished scenario story write natural language stage directing module adapt scenario heuristic actor define 3 dimensional model accord adapt scenario scheduling action perform demonstrate sdas produce animation story write natural language computer animation Hare Tortoise Aesops Fables produce example acknowledgement author like express appreciation continuous encouragement Kunihiko Niwa research start suggestion Kazumoto Iinuma Masako Ichikawa Yumiko Koyama contribute programming References Chacola DG Schrack GG Modeling Animating Dimensional Articulated figure Proceedings Graphics Interface 86 Chamiak E Model Childrens Story Comprehension AI TR 266 AI lab MIT 1972 Clocksin WF Mellish CS Programming Prolog Springer Verlag 1981 Doyle J Glimpse Cognitive Psychology Artificial Intelligence MIT Perspective MIT Press Drewery K Tsotsos J Goal Directed Animation English motion Commands Proceedings Graphics Interface 86 Marino G Morasso P Zaccaria R Motor Knowledge Representation Proceedings AAA I984 Pereira F Warren D Definite Clause Grammar Language Analysis Survey formalism Comparison Augmented Transition Networks Artificial Intelligence 13 1980 Reynolds C Computer Animation Scripts Actors ACM Computer Graphics vol 16 13 Jul 1982 Rumelhart DE Notes Schema Stories D G Bobrow Collins Eds Representation Understanding Studies Cognitive Science Academic Press 1975 Schank r Abelson R Scripts plan Goals understand Inquiry Human Knowledge StructureLawrence Erlbaum Associate 1977 Thalmann n Thalmann D use high level 3 D graphical Types Mira Animation System IEEE Computer Graphics Applications Dec 1983 Zeltzer D Knowledge base Animation Proceedings ACM SIGGRAPHSIGART Workshop Motion 1983
3,1989,abstract experiment conduct people gesture speech manipulate graphic image computer screen human substitute recognition device analysis show people strongly prefer use gesture speech graphic manipulation intuitively use multiple hand multiple finger dimension surprising uniformity simplicity gesture speech analysis result provide strong encouragement future development integrate multimodal interaction system introduction paper present study people intuitively gesture speech communicate computer see explosion capability computer present output bandwidth input channel computer limit Aside keyboard input device available user mouse lightpen touch screen limit equivalent pointing finger exception development 3 dimensional gesture recognition device SensorFrame Rolky Glove Drawing Prism device capable tracking motion multiple finger time multi touch pressure sensitive tablet capable tracking motion multiple finger introduce technology development try explore feasibilityand requirement integrate gesture speech recognition system experiment human instead computer perform require recognition card selected set graphic object manipulation task uted direct commercial advantage acm copyright notice title publication date appear notice give copying permission Association Computing Machinery term gesture study refer hand motion manipulate graphic object refer hand motion complete substitute verbal communication sense American Sign Language term refer body motion include hand mean emphasis conversation research gesture focus gesture substitute speak language preverbal mean communication relevant purpose human computer interaction addition interpersonal communication different communication computer practically empirical research relate manipulate graphic object computer display restrict pointing device keyboard command severe limitation inherent type communication dimensional pointing result largely irrelevant purpose METHOD Thirty subject recruit experiment computer communication speech gesture seat fast high resolution bitmappe monochrome graphic terminal video camera different angle microphone record subject gesture speech figure 1 physical layoutof experiment communication mode subject order communication mode randomize subject communication mode allow gesture word subject tell computer able hear kind gesture acceptable purpose experiment mode Subjects ask perform gesture reasonably close proximity 18 inch screen video camera able observe addition perform basic task gesture mean communication subject ask perform task voice communication channel mode tell computer hear say construe attempt carry instruction manipulate object screen interaction mode utilize gestural verbal communicationwith computer subject free use natural convey computer want figure 1 physical setup experiment communication mode subject perform seven operation screen image 3 inch wire cube show figure 2 operation characterize reference action cube half screen subject tell target cube half screen perform action seven different operation subject ask perform classified basic group rotation translation scale rotation operation cube rotating axis 3 dimension subject attempt target cube perform rotation transposition operation cube move leave right origin position screen subject try transpose cube axis transposition imply slide motion change location cube sealing operation cube grow shrink original size target size subject try rescale figure 2 actual image cube trial target cube size reference cube experimenter madjacent room judge subject complete attempt set target cube motion experimenter cause target cube emulate reference cube control keyboard experimenter room end experimental session subject ask preference communication mode addition subject ask prefer typing mode experiment structure experiment use standard hierarchical ANOVA design communication mode seven operation trial mode carry 36 subject independent variable speed cube motion size cube distance movement hold constant subtask experiment RESULTS Videotapes subject analyze dependent variable different rater reliably analyze videotape datum accord detailed gesture classification scheme develop course project Details gesture classification scheme complete presentation result find Highlights complete analysis present Words Subjects total 2397 word 470 trial speech record speech communication mode average 528 word trial significant difference find trial 13 001I seven operation translation trial average 580 word scale trial require 382 word trial rotation trial consume 588 word Task relate word 2397 word 2007 actually useful task rest represent inadvertent speech act hms ahs filler word okay yeah mispronunciation correction significant difference p 001 find trial translation trial require 520 relevant word scale trial take word 315 relevant word rotation trial see 494 average task relate word trial Lexicon total lexicon consist 223 word include subject say relevant actual vocabulary useful word contain 141 word Syntactic Structure syntactically utterance form imperative 936 percent 29 percent utterance declarative 34 percent unclassifiable eg leave significant difference percentage imperative p 05 transposition operation frequently direction leave right command verb average 87 percent command scale operation average 94 percent rotation average 95 percent imperative Fingers 1773 individual finger show 464 gesture 38 finger gesture single finger 290 percent finger gesture occur frequently 241 percent follow finger gesture 168 percent time finger gesture account 86 percent gesture finger gesture 21 percent finger gesture 6 percent remain 97 percent gesture show hand individual finger time index finger present 971 percent follow thumb 653 percent middle 441 percent ring finger 409 percent little finger show 405 percent time significant difference 13 001 number finger gesture trial scaling trial 575 finger average rotation trial show 281 finger average vs translation trial 315 finger average Hands see 609 hand 464 gesture way number hand gesture mode trial vary significantly p 001 trial translation 11 hand scale trial average 15 hand rotation average 12 hand gesture Alignment Gesture Manipulation Object frequently gesture directly screen object manipulate videotape transcription record gesture shift subject leave right object manipulation object alignment feature determine difference position focus gesture start object suppose manipulate take point distance part finger gesture minimize define center gravity focus gesture gesture focus extremely useful aspect identify classify gesture 252 gesture gesture communication mode 78 percent misalign object screen effect show significant difference p 05 trial translate leave right misalign 717 percent time expand shrink operation misalign 819 percent time rotation misalign 796 percent time depend axis rotation alignmentmisalignment significantly different misalignment 69 percent subject 424 percent 345 percent leftright displace misalign way 523 percent Gesture Types determine relative focus gesture start identify basic group motion rotation slide growingshrinking correspond fairly type operation object rotation translation scale classify 199 gesture rotation 137 translation 128 scale gesture 135 gesture translate object 132 977 percent classify translation gesture accord scheme 125 gesture scale operation match gesture classify scale 984 percent time 204 rotation object operate gesture correspondingly classify 960 percent rotation gesture Preferences Modality post experiment question overwhelmingly 13 01 583 percent subject prefer use speech gesture 194 percent preferred gesture 222 percent like speech good experiment 252 trial choice possible subject speech gesture 178 time compare gesture 34 time speech 40 time significant difference trial speech 13 01 translation operation 12 percent time subject speech scale condition 26 percent scale trial choice possible Speech choose rotation trial 10 percent time ifor reader familiar notation p indicate probability difference occur random chance discussion learn experiment see small number total word word speak time result confirm finding Ford find small vocabulary perfectly adequate limited domain communication furthermore syntactic structure speech provide encourage evidence simple natural language grammar build account linguistic communication finally inexpensive commercially available speech system recognition ability exceed vocabulary necessary task example system speaker dependent accept discrete word ie speaker pause briefly word like significant restriction give average number word speak encouraging evidence speech aspect manageable integrate speech gesture system future large datum collect fingerhand position motion gives rise simple conclusion People normally use finger system restrict user single hand finger motion like mouse inadequate manipulation analyze experiment feel safe generalize manipulation real world application likely complex new question raise result show subject misalign gesture target object gesture input system identification object manipulation utmost importance speculate effect feedback ability user modify misalignment feedback practice experiment subject limited feedback gesture indication computer think user finger position relative objecl useful gesture system provide feedback display find subject gesture dimension follow outline screen depend effect laying achieve move finger hand dimension restrict dimensional input gesture severely limit ability naturally communicate gesture lot evidence argue combination input mode subject preferred speech gesture ideal combination use state preference mode ideal particular speech difficult subject sufficiently specify parameter operation Error check correction conjunction form filling program necessary ensure relevant parameter sufficiently specify plausible presence mode speech gesture reliably identify surprising uniformity way subject communicate gesture speech indicate intuitive common principle gesture communication expert user gesture communication channel equally accessible computer user result present meaningful term statistical significance descriptive indication kind thing people communicate gesture andor speech interpretation result accompany note caution operation experiment represent small subset potential manipulation perform operation investigate include constructingassemble object explore magnitude operation sense large vs small distance motion object speed action perform fast vs slow motion object obviously data point complete picture human computer interaction gesture speech provide insight question manipulation graphic image gesture speech acknowledgement research support National Science Foundation SBIR grant ISI 8660349 like thank Paul McAvinney discussion conception project Sharon Shepard provide valuable support data collection phase project exist
4,1987,abstract paper present overview Alternate Reality Kit ARK animate environment create interactive simulation ARK build physical world metaphor object image position velocity experience force user manipulate object mouse operate hand enable carry throw object press button operate slider interface feature discuss light general user interface tension literalism magic Literal feature define true interface metaphor Literal feature enhance interface learnability Magical feature define capability deliberately violate metaphor order provide enhanced functionality Discussion ARK feature include informal observation early ARK user assessment feature learnability usefulness position magical literal axis ARK include magical feature application level user train minute paper ARK tension literalism magic raise interesting question question present briefly conclusion resume Cette presentation donne une description generale dune aTtrousse outil pour une autre realitet ARK Alternate Reality kit qui consiste en un environement anime pour faire de la simulation interactive ARK est base sur un modele du monde physique les objet y ont une image une position une vitesse et ay sont sou mis des force Les utilisateur manipulent les objet aide dune Tmaint controlee par la souris qui leur permet de porter et lancer des object dappuyer sur des bouton et dajuster des levier Les propriete de interface sont decrite en fonction dun conflit entre realisme et magie Les propriete realiste sont cell es S qui respectent le modele physique sur lequel e base interface et qui facilitent lapprentissage de ce dernier Les propriete magique sont celle qui violent les regle du modele physique pour en accroitre les fonction La discussion portant sur chaque propriete de ARK comprend le resultat dobservation des premier utilisateur une evaluation de la facilite dapprentissage de la propriete en question de son utilite et de sa position le long de laxe magie realisme Bien que ARK comprenne des propriete magique se utilisateur au niveau des application ont pu etre entraine en quelque minute Quoique cette presentation porte sur ARK le conflit entre realisme et magie souleve de son propre chef des question nt certaine sont brievement presentee en cone usion introduction designer system use novice gain great advantage basing interface know metaphor computer behave way analogous system understand user learning time greatly reduce Interface feature true designer metaphor call literal learnability ofliteralism make good thing designer provide user enhance capability price breaking metaphor feature allow user wonderful thing far capability literal feature Capabilities violate metaphor order provide enhance functionality call magical power magic make good thing tradeoff learnability literalism power magic employ tension way present experience design observe user Alternate Reality Kit metaphor base system develop nonexpert computer user Alternate Reality Kit ARK intend allow user play simulate world create new one ARK base strong analogy physical world important capability ARK literal transcription computer physical world behavior system design use inexperienced user ARK certain magical characteristic Observations ARK user suggest novice significantly hamper small magic magical feature require brief explanation AR ks basic functionality teach minute paper Alternate Reality kit brief introduction ARK user interface term magic literalism dimension complete description functionality philosophy ARK reference attempt way general discussion tension magic literalism simply employ tension useful way analyze central feature ark interface ARK serve example magic vs literalism tradeoff believe present user interface firml y ground single metaphor conclusion present question raise magical literal view kind user interface Literalism vs Magic ARK Alternate reality Kil ARK system create interactive animated simulation ARK simulation arc intend enable development intuitive understanding simulalion interaction rule make rule appear accessible physical object call interactor ARK support modification creation new simulation animate ARK environment interface faithful lo physical world metaphor object visual image position velocity experience force object hand user control mouse hand user carry object throw press button operate slider control figure 1 real world thing happen simultaneously pendulum swing number change control box response operation slider intent user conclude quickly screen depict physical world user directly manipulate physical object advantage literalism interface strongly base wellknown metaphor require little explanation user stick completely metaphor cripple system functionality example ARK user wish connect simulate pushbutton ARK device turn device button device depict physical object directly manipulate hand user require connect button drilling hole device cut metaphorical electrical work like require ARK perfectly analogous everyday physical world design ARK consider perfectly literal way connect button lo tedious Instead ARK user connect button simply drop device button message send stamp surface    device understand button message button fall right object figure 2 button message meaningful il stick surface object invisible connection establish automatically button immediately functional Furthermore button create cause nonphysical effect double object size mass cause object vanish feature like call magical enable user powerful thing arc outside possibility metaphor admittedly literalism magic conventional computer science parlance find particularly appropriate discuss ARK Alternate Reality kit suggest real literal ability choose modify reality magic ARK literal system contain certain magical feature arc useful literalism limit Ilut lesson ARK literal aspect interface arc obvious magical capability arc hard learn ARK time explain basic actually measure second lternate ReoJty Ii ii Figure 1 Appearance screen see user Alternate Reality Kit window object contain represent alternate reality mouse operate hand near center cast shadow indicate alternate reality hand user mean interact system pick carry object press button interactor present alternate reality hand label Gravity cause gravitational force field present label Motion cause object change position accord velocity window show considerably small typically ARK Figure 2 manipulation button user prepare pick button surface Vertical Launcher b button carry simulate photograph c button release photograph understand turn button fall th ro u g h     piece add magic relatively expensive require explanation come free doc user realize physical metaphor design ARK face tension limitation impose literalism obscurity magic positive term power magic learnability literalism Overview ARK ARK project development System Concepts Laboratory Xerox Palo Alto Research Center implement Smalltalk 80 programming environment system describe evolve influence user feedback continue kind object mention paper show Table 1 system consist collection physical object manipulate simulate hand rare use keyboard type text hand user sole mean interact system ARK user kind thing hand directly change object position velocity carry throwing send object message press simulate button introduce new object button environment select popup menus user change state query object send message message represent button example button Smalltalk 80 trademark Xerox Corporation paper term Smalltalk refer Smalltalk 80 language message velocity set mass tosome parameter describe special button message menu button cause magical effect attach object press cause object create menu list message object understand Selecting message menu cause corresponding button create attached object ready use button send unparameterized message response call simple button illustrate Table 1 button require parameter represent object reply message call non simple show figure 3 4 warehouse object contain copy kind object system include type underlie Smalltalk environment press appropriate button user cause warehouse display menu list object warehouse contain Selecting menu cause copy name object introduce alternate reality button allow user create new kind object store warehouse Ways combine exist button new kind button explore Types ARK User ARK like visual programming environment intend kind user appicationslevel user typically student carry simulate lab low level simulation builder creator particular application role layer populate individual create tool use simulation builder far observe 50 application level user simulation builder application level user experiment study people reaction violation physical law 12 user create new object new kind object accumulate empirical evidence enlighten certain figure 3 Buttons require parameter set velocity button show small plug specify user reach plug b user grab plug carry parameter object c user drop plug object prepare activate button parameter specify small dot start move path connect plug Gothe button simple button show table 1 experiment user observe GI 1987 portion interface application level user use menus non simple button type illustrate figure 3 4 user come computer expectation encounter sophisticated computer user slightly time learn literal feature interface appear expect magic ARK contain hand extremely naive user young child expect interface literal apparently expect magic ARKs balance literalism magic right computer novice age effect user sophistication great misunderstanding correctable sentence Limitation Magic Literalism Analogy External Factors ARK presentation Alternate Reality kit depict designer violate metaphor order provide enhanced functionality magic designer face factor control input device computer performance limitation constraint cause metaphor violate way necessarily enhance functionality fix requirement call external factor impose tl1e designer external factor arc unimportant    successfully present external factor user absolutely crucial find external factor difficult present literal feature magical enhancement ARK interface ARK external factor typically degrade lcarnability enhance functionality consider feature literal magical example alternate reality contain large number strongly interact object animation rate frame second drop noticeably hard grab throw object jerky motion object make look like 1     figure 4 Buttons elicit response message send large object view rectangle represent result velocity button negate button show receive answer message send answer display text graphic view rectangle answer accessible object living view object view rectangle access button like object negate button attach TwoVector object display velocity button view similarly plug specify parameter set velocity button specify TwoVector object negate button view Buttons capture response somewhat magical especially ability represent object view rectangle button represent response experiment user observe real world thing make hard interact external factor break metaphor way degrade functionality behavior clearly literal outside real world behavior prefer use sense wonder term like magic odd annoying visual phenomenon second example mouse operate hand use indirect input device like mouse break real world metaphor provide enhanced functionality pointing device mouse know small finite time learn Furthermore mouse button hand grab object hand activate simulate button observe user point confuse function mouse learn enable user thing capability physical world hand Observations system user indicate external factor troubling aspect system indicate Figure 5 operation mouse occasionally slow animation rate enhancement functionality aid ark learnability ideal system include external factor fit magical literal spectrum unfortunate constraint believe metaphor base interface usually feature literal magical Selected Interface Aspects section describe great detail aspect interface application level user intend complete list sample important aspect tile interface feature list evaluate magic content discuss tile power vs learnability tradeoff note user experience literal aspect list lbi section summarize Figure 5 Use hand user pick object simulate hand tile grasp object carry cast shadow tile alternate reality beneatll grasp object release fall alternate reality maintain velocity imparted hand motion tlli way tl1e user play gravity simulation depict figure 1 tllrow tile moon orbit planet Magic vs Literalism Literal Power vs Lcarnability hand limited ability enable user change position velocity object establish physical contact relationship object contribute bit tile user understand tile system basic user need tell mouse move hand screen leave mouse button enable grab hold object try throw mouse remainder tllis brief explanation tile use hand user infer follow 0 object screen physical entity 0 physical proximity semantic content subject experienced mouse user ask necessary hand object order pick 0 hand carry object drop new location change position 0 hand change object velocity invite tllrow object user ask throw ask allead guess tllese user guess correctly start hand move release hold object Experienced mouse user ask throw accomplished press special mouse button 0 use shadow indicate object reality moderately successful user additional sentence explanation require shadow indicate object hand hovering object window Activation Simple Buttons user play planetary orbit simulation figure 1 wish suspend gravity temporarily right figure kind controller device label Gravity button surface button message send stamp user activate simulate button positioning hand press middle mouse button simple button show Table 1 application level user button require parameter figure 3 send message represent response Figure 4 ARK experiment Magic vs Literalism Literal Power vs Learnability Buttons moderately useful enable user send message object fairly easy explain user understand immediately button training time spend point user characteristic visual presence button idea object respond button press way suggest stamp button simply assume explicit instruction user adopt model consistent picture button thing send message button build importance physical contact establish relationship object Manipulating button simulate button pick surface object certain object button stick surface object respond message button drop object understand message button fall object fail stick surface button simultaneously attach object button large object rest uncommon object button hanging edge completely cover object rest Magic vs Literalism Moderately Magical Power vs Learnability Buttons easily connect removed enable user communicate object flexible way uncommon generally useful button lay selective stick button prevent certain class semantic error example send text message cube root result error table 1 Hand hand user primary mean interact system activate button carry object leave hand show normal relaxed position right hand show carry button shadow cast indicate hand hold object Meta Reality Simple Buttons User input originate button Buttons pick drop object activate hand button bear message send eg Xerox button make copy non simple button require parameter capture response message depict figure 3 4 Warehouse Warehouse icon contain kind object system include Smalltalk environment ARK implement objectmenu button create list kind object user select select object emit alternate reality warehouse Representatives Smalltalk object appear ARK kind ARK object appear inside representative object representative image text describe object represent Slider Controls Sliders convenient way specify number hand grasp 43 tab center groove lnteractor lnteractor physical manifestation normally intangible rule nature physical manifestation provide place interaction rule tactile presence deny mystical character normally attribute universal law highly magical object central importance ARK strategy enable intuitive understand simulation interaction rule GI 1987 manipulability button useful aspect require sentence explanation fact button stick fall object depend object ability respond button message bit tale uninformed user discover accidentally button pick object slightly startle user wonder button work remove surface object drop drop button surface large nonunderstanding object button disappear actually button lie underneath object having fall Interactors ARK interaction law simulate universe newton law gravity example represent physical object call inleraclor lnteractor form interface user fundamental law simulation Magic vs Literalism Highly Magical Power vs Learnability Interactors physical embodiment normally intangible abstraction important actor story design ARK attempt provide intuition make thing concrete enable user change physical Jaws interactor provide capability fundamentally suggest real world metaphor user trouble accept idea control center gravity example need explicitly introduce idea interactor object represent abstraction occasion user difficulty understand exactly abstraction control user require minute discussion clarify interactor role simulation short time absolute term long require literal feature Multiple Realities computer screen ARK user see possibly overlap rectangular window window represent separate alternate reality alternate reality user simply move hand expose portion window window automatically completely expose move stack overlapping world user carry object alternate reality Magic vs Literalism Highly Magical Power vs Learnability use overlap window bring usual advantage enlarge virtual screen area provision multiple reality enable user organize ARK task example world build new object try example window facilitate comparison separate world speed light example user understand idea readily brief description trial require user comfortable ability reality hop user accidentally bring bury alternate reality startle certain application object drift window disappear edge Users concern amused clear happen object retrieve exist fact coordinate system window world indefinitely large object far allow computer ability allocate new word store grow x y coordinate interactor absolute time teach use overlap world short long time take typical literal interface feature helpful t Manipulating Buttons llnteractorsl MAGICAL impact functionality peration Mouse occasionally Slow Animation rate LITERAL Iuses hand Impact Learning Time helpful    figure 5 aspect ARK interface represent graph easy learn thing right useful thingsare Interface aspect tend lie line magical feature upper left literal feature low right existence void upper right sign fundamental tension literalism magic interface designer provide powerful functionality price violating metaphor break metaphor particularly enable evidence ark occasionally slow animation rate use mouse Menus include rarely user experiment system precede list demonstrate inverse correlation power learnability Interface aspect literal easily understand fact important part literal function simply assume user lbose aspect magical useful require majority training time AR ks limited use magic doc prove confusing novice total teaching time remain short minute explanation novice able use capability outline Conclusions Questions magic literalism tension discuss central feature Alternate Reality kit serve useful way analyze ark design issue user experience particular large portion ARK literalism end spectrum jhe important aspect need explicitly explain Furthermore magical aspect require explanation limit use magic ARK keep total teaching time low User experience indicate application level functionality teach minute feature magical enhancement literal adherent metaphor arc troubling ARK magic vs literalism tradeoff interesting perspective system interface center single metaphor graphical programming environment desktop like window system question raise way view metaphorical user interface designer decide implement capability magically instead literally Literalism carry far interface literal surprise novice user building system literal magical way task enable user smoothly wizard status good minimum set magical capability allow user build magic spell possible find metaphor put external factor literalism magic spectrum question like lead interesting discussion way enable control release magic latent computer acknowledgement follow individual source stimulate discussion thoughtful comment Sara Bly Adele Goldberg George Goodman Laura Gould Jane Laursen Tim OShey Dave Robson Frank Zdybcl
5,1987,Abstract Handmarkings eg handwritten proofeditor mark direct editing command interactive computer system exploratory experiment study potential value handmarking editing text picture result show circle frequently scope mark arrow frequently operator target indicator experimental comparison show handmarking potential fast keyboard mouse edit task ultimate value depend style detail user interface implementation Key Words handmarkings gesture edit user interface technique Introduction Todays technology make possible people write draw tablet directly computer screen computer recognize execute handmarking gesture command Coleman 1969 demonstrate feasibility year ago Handmarkings advantage cite direct manipulation type user interface Shneid    erman 1982 think handmarking form basis improve text editor textedite prolific computer application conventional text editor hard time consume learn Mack Lewis Carroll 1983 learn time consuming use experience user require 20 35 sec perform typical editing operation Allen Scerbo 1983 Gould Alfaro 1984 Gould Lewis Barnes 1985 participant require half time hand modification mark document Gould Alfaro 1984 note summarize series exploratory experiment complete handmarking Gould Salaun 1986 Experiment 1 Editing Text Pictures Handmark    ing Purpose goal observe people leave way thing carry edit operation pencil text material picture material work similar Wolf 1986 motivation collect data influence development handmarking command language appropriate text image picture task second goal compare time edit handmarking find early edit text editor Method volunteer Yorktown Research Laboratory participant participant carry specific editing operation 11 text task 12 picture task task appear separate page panel label figure 1 9 reduction actually task participant read aloud instruction page reading time typically paused carrying instruction Pause time carry instruction execution time say turn page ready begin task turn blank sheet paper expose participant receive different random order 23 task intention study edit operation picture text task insert object room exist insert object room exist insert space object place delete copy replace group select clear GI 1987 operation describe multiple way eg particular operation consider Insert Exchange Landauer Galotti Hartwell 1983 heading Table 1 categorize result example combine Insert object task arbitrary distinction participant instruct write person eg secretary unambiguously understand carry write tell carry work simply speedily possible avoiding use word possible time videotape Afterwords judge unfamiliar experiment interpret handmarking judge instruction task example show figure 1 9 judge aware participant ask Results Examples result show panel bc d figure 1 9 circle number panel indicate number 11 participant write handmarking way priori feel edit operation divide component select scope mark verb operate mark target mark apply analysis scope select mark participant circle albeit non perfect one 49 253 case figure lb example scope mark comer eg box rarely time scope mark eg delete operation figure 4 case scope implicit base oftentime end operate mark eg figure le ld informal inspection videotape show selectionscope object generally prior draw operator far commonly operateverb mark line arrow head 57 case figure 1b le ld example line straight gently curve sharp point inflection double head tail line arrow meaningful common target indicator head arrow Target mark vary widely shape see figure 2 3 redundancy participant mark eg rarely circle object cross participant generally find nonverbal mark sufficient carry task need use word enhance accuracy handmarking participant use conventional proof editing mark eg caret analyze characteristic edit operation separately room report result show Table 1 participant spend average 151 sec task spend 33 sec reading instruction 51 sec pausing think 67 sec actually execute task spend somewhat time text task 169 sec picture task 134 sec Fl10704p05 total time seven different editing operation differ significantly F660526p001 term component total time Read time differ significantly F6602627p001 Pause time differ p10 Execute time differ significantly F660902p001 InsertMove operation Delete operation carry significantly fast slow operation duncan range test p05 judge interpret 86 handmarking correctly ie accordance instruction ask participant Group 100 InsertMove 96 Delete 93 handmarking hardly misinterpret Copy 80 Insert Space 80 handmarking misinterpreted case select 56 Replace 56 handmarking misinterpret half case Discussion People way handmarking Wolf 1986 addition reflect learn habit particular choice affect layout detail material room marking spatial relation relevant part material mark single page Arrows frequently material modify spatially separate ie locate greatly separate place file arrow time edit operation handmark e fast 20 35 second operation find texteditor Allen Scerbo 1983 Gould Alfaro 1984 Gould Lewis Barnes 1985 comparison risky particular revision different study direct comparison material suggest handmarking potential qe fast depend quality system implementation Gould Salaun 1986 Conclusions Circles popular scope mark arrow popular operator target mark Handmarkings potential fast traditional texteditor actual value course depend user interface implement Experiment 2 Editing Computer Tablet experiment study participant exist state art computer tablet stylus edit task edit paper pencil handmarking experiment 1 case modification actually computer effect stylus tablet paper pencil handmarking produce visible marking screen case picture text actually modify computer importance experiment result clarify implementation detail use horizontal tablet stylus vertical display affect potential value handmarking Method participant serve Experiment 1 month early nineteen 23 task experiment 1 state art tablet stylus display system vertically orient CRT display participant table display participant horizontal tablet connect computer task store computer originally create text picture task active work surface area tablet size screen 7 x 412 connected tablet electronic stylus task display screen participant move stylus tablet correspond mark show display paper ie stylus contain ink participant receive different random order 19 task Results participant require 198 sec task tablet stylus compare 159 sec task paper pencil handmarkings 8 participant participate experiment fast handmarking tablet stylus Fl7922p05 read time 31 sec Pause time handmarking Fl18157p10 execution time long handmarking 120 vs 72 sec Fl18504p05 participant speculate spatial displacement tablet display great ease write pencil paper great familiarity pencil paper compare tablet stylus seven editing operation show Table 1 fast paper pencil stylus tablet speed advantage pencil handmarking paper text task 217 17240 sec picture task 176 14531 sec discussion weakness experiment computer carry execute modification participant computer available experiment series Gould Salaun 1986 show 198 sec require use tablet stylus time require use state art computer system mouse actually carry modification participant 211 sec Conclusion implementation detail reduce potential advantage handmarking reduce difference Experiments 1 2 tablet stylus technology probably improve General Conclusions Circles frequently scope mark arrow frequently operator target indicator Handmarkings potential efficient text editing achieve today ultimate value depend quality implementation paper pencil result obtain serve target goal designer acknowledgement thank Clayton Lewis early conversation work Brian Haupt John Checco assist implement experiment Angie Fusca assistance datum analyse manuscript preparation publication Note summary portion long paper intend preempt publication long report consider prior publication
6,1989,ABSTRACT Rapid prototype experimental technique play increasingly important role software development common issue concern adoption identify place system life cycle appropriate select tool use paper present model different problem type suggest fit find nature problem hand feature associate available technique Emphasis place fact commercial tool suitable certain problem type area development highlight implication concern human computer interaction discuss KEYWO RDS Experimental technique Information system development rapid prototype Requirements analysis introduction stage development computer base information system developer face form unpredictable change instance innovative application formal statement objective requirement impossible evolve work progress necessitate strategy encourage experimentation prototype experimental technique emerge approach deal condition paper describe differentinformation systemsproblem type suggest system development cycle experimental technique effective technique briefly reviewedand place context different problem condition paper emphasize excellentprogress software engineering support experimentalprototyping stress need technique support tool assist analysis specification ill definedproblem uted direct commercial advantage acm copyright notice title publication date appear notice give copying permission Association Computing Machinery area furtherdevelopment anticipate consider integration elicitation tool computer aid development environment b development problem formulation assessment support c development High Level Languages paper highlight implication concern human computerinteraction RAPID prototype DIFFERENT PROBLEM TYPES problem type set technical social issue form distinct problem situation computer base solution require Lehman provide classification computer program identify different problem situation classification extend place context sociotechnical system Land call SPEU Specification Practice Evolution Uncertainty S type specification situation find exist complete authoritative view environment situation emphasize transformation process success solution evaluate extent satisfy specification p type practice situation satisfaction specification p type problem obtain complete abstraction environment change condition developer necessarily undertake iterative process reformulation practice emphasis place verifying specification evaluate efficiency solution e type evolution situation characterize need predict effect system environment prediction imperfect design function evolve developer need apply technique simulate operation object system need apply tool enable model accommodatechangerapidly finally u type uncertainty situation characterizedby absence model application presence factor inhibit reliable abstraction environment developer apply tool technique allow exploration object system order resolve uncertainty Emphasis place elieitation specification produce clear view environment determine common feature taxonomy model communication human computer interaction adopt prototype imply intercommunication entity end user system specialist operational simulate computer base experimental model application decision prototype depend problem characteristic involve consider follow point development exercise appropriate party involve b particular tool technique available give problem context use RAPID PROTOTYPING SYSTEMS LIFE cycle Rapid prototype normally regard method fact find place beginning system development cycle common motivation clarify system requirement provide quick feedback enhanced communication user specialist different prototype experimental technique effectively support divergent stage eg test choose design demonstrate new product implement new system figure 1 show problem type context system development life cycle straight line go table indicate stage rapid prototype experimental technique critical example s type condition fall entirely domain specialist problem define understood shape solution leave discretion specialist define select efficient mean deal problem success solution evaluate near implementation stage specialist long control experimental approach form pilot project applicable p type situation involve uncertainty affect domain specialist change condition incomplete specification force developer adopt iterative method modify design test quickly extent result exploratory process fit need application dictate success system second line figure 1 subdivide domain specialist user participation subdivision help indicate problem type suggest great need user involvement particularly pertinent e type u type problem user integral system model uncertain nature problem S Type P Type E type u type specification Speczit LOGICAL DESIGN VEtitr PHYSICAL design J Ji IMPLEMENTATIDN figure 1 system life cycle model problem type force specialist work jointly user define work model application problem type critical activity development process concentrate formulation experimental vehicle yield acceptable specification TECHNIQUES tools commercially available tool developedspecifically purpose rapid design prototype lead example experimental approach system development approach emphasize learn instead design utilize immediate feedback system construction process describe form prototype experirnental technique figure 2 depict life cycle applicable light different problem condition Gameplaying use artificial computer base working environment system user play actual simulated role gain insight determine course action exploratoryprototypingfocuse basic problem communication specialist end user objective use work model catalyst elicit idea promote cooperation involve party System simulation represent system sketch assess characteristic system existence simulation generate operational system approach suggest model interaction resolve problem communication scenario base design detailed form system simulation simulate event user experience system operation provide model input process output screen associate dialogue Experimentalprototyping test hypothesis system analyze Shortcuts take order produce working model rapidly efficiency completeness sacrifice testability modifmbility production prototype scale representation basic design idea employ material final system design Pilot system access constrain version fmal system limitation population serve load handle normally adopt pioneer project S Type P Tgpe e type u Type REQ analysis specification logical DESIGN PHYSICAL design implementation game play exploratory prototype system simulation scenario base design Experimental prototybe production prototype Pilot Studies Figure 2 Experimental technique system life cycle different problem type Land Somogyi argue main area concentration software engineering satisfying need S type problem situation scenario tool support prototype technique design specialist program generator utility debugger optimizer normally integrate form software programming environment tool suitable creation rapid production prototype commercial tool currently develop aim p type characteristic include database query facility fourth generation language widely accept industry promise productivity advantage significant impact end user compute limited applicability efficiency appropriate experimental prototype scenario base design circumstance user normally present system define functioning involvement restrict operation evaluation experimental system e type u type environment need suitable technique tool evident essence support need focus elicitation information need analysis conceptual design physical design code testing promise development computer Aided Software Engineering case case technology demonstrate potential conceptual modeling vehicle communication case tool significant impact prototype analysis ill define problem accommodate facility support end user interaction implication concerning HUMAN COMPUTER interaction SPEU classification see continuum span define problem condition involve considerable uncertainty involve problem represent figure 3 situation S type characteristic specialist user technology normally exhibit enormous tolerance unexpected behavior system main concern development efficient product soon operational prototyping context experiential exercise mean work model real life operation focus developmental exercise successive refinement assembly system component hand condition reflect u type extreme problem owner necessity user technology interest professional user substantial need assistance main concern analysis problem situation carry process focus experimentation search alternative explanation prototype condition primarily conceptual process formulation representation Criteria S Type o    Type Problem type User sartectllogT relation procedural focus Tools ugefocu saglt mode strture o Ill define Specialist o Eer Tolera1e Aistae lead Assemblage Experimentation Pafinement Searoh Prodtion mAlysis Experiential ConceptUal gure3 Different problem condition exhibit significantly different characteristic implication categorization follow prototype S type p type condition entirely different prototype e type u type problem Developers view recognize concerned prototype technique selection appropriate approach depend purpose skill level involve project b developer long concern design human computer interaction application selection use appropriate tool give condition c prototype regard merely experiential exercise appropriate environment problem owner able interact computer experimentally conceptualize model system assess alternative design articulate specification d need development tool technique support u type condition important element inclusion tutoring system intelligent assistant role cover aspect confront inexperienced computer user efficient use system deal problem hand minimum intervention specialist development prototype TECHNOLOGY interest experimental method continue certain technical development increase automation phase computer base system development include project management highlight potential area development help support need conceptual formulation highly pragmatic approach Requirements elicitatlon tool technique introspective technique need assist end user articulate requirement objective elicitation tool assist individual provide version account systematic fashion allow try alternative design base initial conceptualization requirement technique draw Personal Construct Psychology elicitation tool support personal decision make knowledge acquisition key idea inclusion end user operator elicitation tool Interaction program process consolidation learn output conceptual model problem Valusek investigate Concept Mapping technique provide specification builder tool ER diagram semantic net Concept mapping technique provide vehicle communication concept understand useful identify boundary problem space integration elicitation tool software engineering environment need provide sound basis participative system design Problem formulation assessment support information requirement analysis normally associate problem formulation documentation intend behavior system condition generally find e type u type problem requirement formulate discover Objectives constraint identify uncertainty air formal specification determine issue concerned necessary support set early project formal direction control mechanism account description diagnosis wide organizational need suggest use technique tool assist organization documentation direction meeting group technique base game playing prove useful function pre requirement stage explicitly identify role prototype important player direction exercise technique concerned problem formulation assessment Future Analysis assessment change occur expect life system Objectives Analysis procedure assist end user articulate objective abstract level current research use technology group decision make particularly relevant fundamental idea approach emphasis cooperative work participant formulate analyze alternative elaborate available information technology involve use computer kind audiovisual communication collaboration tool Normally group facilitator advise use technology coordinate flow proceeding prototyplng narrow domain High Level Languages design provide degree abstraction conform closely level conceptualization formulation user language normally sacrifice flexibility generality simplicity ease use apply certain application area instance SBAL Small Business Accounting Language provide view account share specialist user order explore variety solution determine build flexibility system high level language prolog formal specification language base specific domain analysis prolog useful context underlie semantic provide high degree abstraction Progress knowledge engineering technique probably result development domain specific application expert system prototype conclusion classification problem condition confront Information Systems developer describe view suggest nature problem vary role user specialist technology different tool technique need problem condition particularly technology assist end user computer interaction support work early stage project paper suggest area development Elicitation tool technique Problem formulation assessment support High Level Languages prototype approach experimental technique discuss attempt system life cycle appropriate implication different situational condition developer determine point development experimental exercise prove effective b assess purpose skill level user select appropriate technique c aware change role paper stress regardless experimental system consider learn vehicle provide precise idea objective target originate development acknowledgement author wish thank George Schiavone useful comment early version paper
7,1986,abstract effect general global documentation detailed step step documentation combine global detailed documentation examine high medium low experienced student 198 student study wordprocesse program complete problem hour session result univariate multivariate analysis indicate general time measure read documentation complete problem student user reaaction documentation program computer system affect type documentation level experience factor introduction common complaint maintenance programmer user computer software documentation highly unsatisfactory unfortunately work recently devote specifically developnent guideline software documentation Boelm Davis fregly 1985 Isa Neal Evey McVey 1982 Norcio 1982 Sheppard Kruesi Curtis 1981 research attenpt apply principle information structure develop application developuent software documentation principle draw work mental model Brooks 1982 Norman 1982 work structure programming Sheppard Curtis Milliman Love 1979 Norman 1982 theorize mental model associate schema understand computer system act appropriately context system intuitively plausible structured documentation help provide necessary structure accurate mental model computer system direct datum measure mental model show inpact computer usage lack Specifically Brooks 1982 theorize progranmer understand computer program topdown process hypothesis generation revision begin global hypothesis end detailed hypothesis program accord Brooks global hypothesis concern global structure program term input output major data structure process sequence global hypothesis successively refine detailed subsidiary hypothesis level detail hypothesis close program text direct conparison Brooks theory programmer start global view program refine detailed view Documentation provide information global detailed level understand program effective aid programmer recent empirical research support notion Isa Neal Evey McVey 1982 find visually structure form documentation command syntax result few required attempt formulate command few failure standard IBM documentation format true programmer nonprogrammer suggest study fundamental process facilitate structured documentation similar programmer nonprogrammer Norcio 1982 find indented documentation clarify control structure program arrange explain function major program segment superior form documentation Computer science student supply correct statement gap program give type structure documentation give structured form documentation Similarly Sheppard Kruesi Curtis 1981 find experienced programmer significantly fast trace forward backward find information program visually emphasize structure control flow program plurality programmer preferred arrangement program element structure arrangement Boehm Davis Fregly 1985 study professional programmer complex program involve concurrent process program high level complexity programmer modify program quickly give resource format enphasize global aspect concurrent process communication process compare PDL Program Design Language documentation emphasize low level detail program study structure consistently make difference understand computer program programmer level structure find appropriate different particular kind programming task apply principle multiple level structure documentation end user program clear level structure documentation require global level documentation emphasize function program second detailed level documentation emphasize detailed function program study design examine combination global documentation detailed documentation fact superior compare global documentation detailed documentation study design determine effect user experience level documentation require good performance specifically interested determine adequacy documentation difference highly experienced user experience user base expectation highly experienced user extent find way computer program inexperienced user need handholde information documentation Method Deaign type documentation construct describe function 1200 line pascal base word processing program student study type documentation page global overview program major element function element b detailed page step step guide command choice available program result occur coomand choice c combine multi level documentation consist global detailed documentation type documentation give user distinct level experience low experience medium experience high experience design 3 x 3 design cross type documentation level user experience Participants George Mason University student divide low medium high experience group report overall computer experience questionnaire question establish level experience general self report question cover form computer use 198 student 29 report experience 32 report slight experience remain 39 report moderate high level experience response question response divide sample distinct group response define experience level student low medium high experience level Materials primary material study consist word processing program documentation word processing program hierarchically organize consisted main menu subsidiary menu concern edit handle entire document file program fully functional menu drive word processor considerably simple common commercial word processor program design record student keypresse work assign problem time keypresse occur menu choice point documentation reflect basic hierarchical structure program different level type documentation develop    global detail global documentation consist overview major functional unit program diagram show interrelated detailed documentation consist step step review choice available point program keypresse require work program result possible keypress term screen display set choice option figure la show overall tree structure program present global documentation text relevant use insert function figure 1 b show detailed documentation function stimulus problem consist modifying print short 12 sentence file order minimize effect type facility necessary modification require 1 2 keypresse figure 2 sample problem procedure student arrived give short biographical questionnaire measure computer background demographic variable randomly assign documentation condition global detailed global detailed documentation editor menu list editing function allow append text insert text delete text workspace single nunber letter correspond choice return previous menu use Esc escape key upper left keyboard ask enter word type string letter press Return key left point arrow keyboard Figure la Infomation relevant insert function present global documentation Insert type INSERT ask number line want insert text type digit number line press return key ask indicate character like text insert Type character occur right place want insert text enter character press return key character occur line program highlight occurrence character give ask correct place type Y fo yes n type N program search occurrence character program find occurrence character end line automatically return editing menu program find occurrence character ask correct place answer Y yes highlight occurrence character material highlight temporarily disappar list choice screen enter text BACKSPACE ESC point able enter text insert keyboard error use backspace key retype material point end insertion press Esc key press Esc key program bring material point insertion add insert material automatically return editing menu figure lb information relevant insert function present detailed documentation figure 1 Portions global detailed documentation erase workspace Read document call letter disk workspace insert word begin second sentence document Append word end sentence document Save revise document disk letter print document margin og 3 blank line figure 2 Example problem student complete word processing program person direct read assign documentation time require read documentation record Subsequently problem present student use word processing program solve problem approximately half hour available complete problem student error instruct continue work problem correctly change notify experimenter time expire student solve problem experimenter continuously observe student oneway mirror control room record occurrence look global detailed documentation duration look documentation cover sheet student lift order refer documentation onset offset refer documentation record stopwatch problem solve experiment student give post session questionnaire measure reaction documentation program experiment general point procedure student uncooperative wish continue participation experimenter instruct end session student complete session represent datum Results data 198 student analyze multivariate analysis variance MANOVA set dependent variable independent variable type documentation global detail b level previous computer experience low medium high experience overall structure group variable analyze section    General Time measure    Post Session Questionnaire measure documentation measure b Program Experiment measure General Time Measures general time measure include time require student read documentation read solve wordprocesse problem Type Documentation multivariate analysis indicate type documentation significantly affect general time measure f approximation Wilks lambda 500 df 4 376 p 01 univariate analysis indicate significant effect type documentation mainly present change time require read documentation F 2189 12133 p 01 student global documentation require average 535 minute read student detailed documentation require 1392 minute student global detailed documentation require 1763 minute summary complex documentation require reading time Level experience multivariate test indicate level experience affect general time measure f approximation Wilks lambda 1337 df 4 376 p 01 Univariate analysis indicate level experience significantly affected time require read documentation time require solve problem word processor F 2m189 863 2312 p 01 time require read documentation highly experienced student require 1090 minute read documentation medium experience student require 1195 minute low experience student require 1453 minute experience seen enable user quickly absorb material documentation problem solve experiment high experience student require 2014 minute solve problem conpare 3109 minute medium experienced student 3572 minute low experienced student Post Session Questionnaire Docmentation Measures post session questionnaire variable measure reaction documentation include perceive learn documentation perceive frequency refer documentation perceive usefulness documentation perceive comprehensibility documentation perceive frequency recall information documentation overall evaluation documentation perceive organization documentation personal like dislike documentation perceive clarity documentation perceive ease recall information documentation perceive applicability documentation problem solve perceive structure documentation Type Documentation multivariate test effect type documentation measure reaction documentation indicate type documentation significantly affected variable F approximation Wilks lambda 164 df 24 224 p 01 Univariate F test indicate perceive learn usefulness conprehensibility organization clarity applicability structure docrnientation goodbad evaluation personal liking documentation significantly affect type documentation 2113 399 679 379 355 364 340 846 756 398 11 OS variable conmm pattern global documentation consider inferior detailed documentation combine global detailed documentation table 1 slight difference detailed documentation combine documentation favor detailed documentation usefulness organization combine documentation edge learn comprehensibility clarity applicability structure goodbad evaluation like documentation Level experience multivariate test indicate level experience signficantly alter reaction documentation F approximation Wilks lambda 206 df 24 224 p 01 univariate test indicate perceive learning frequency reference comprehensibility clarity memorability applicability structure overall goodbad evaluation like documentation significantly affect level experience student F 2113 532 1218 437 445 855 1027 319 310 357 p 05 mean present Table 2 indicate experience level increase student user feel write clear structure applicable problem well overall feel learn documentation understand well recalled information memory like documentation variable decrease experience increase perceive frequency refer documentation direction change consistent increase expertise understanding experience user bring situation intriguing aspect result level experience type documentation affect unique aspect reaction documentation specifically level experience increase ease frequency recall information documentation decrease frequency refer documentation type documentation affect variable conversely different type documentation affect variable experience perceive usefulness information perceive organization documentation distinct effect indicate sane qualitative difference effect type documentation level experience Post Session Questionnaire Program Experiment Measures Type Documentation type documentation affect reaction wordprocesse program experiment general reaction different type documentation discuss carry reaction program general set Level experience Level experience affect reaction program experiment general multivariate test effect significant f approximation Wilks lambda 204 df 32 170 p 01 Univariate F test indicate level experience affect likedislike program perceive ease program understand program frequency difficulty program likelihood purchasing program wordprocessor motivation experiment pleasantnessunpleasantness experimental set ease keyboard computer ease understand visual display monitor F 2100 437 894 1188 930 594 828 670 405 575 p 02 inspection mean effect Table 3 indicate experience facilitated ease program final understanding program ease keyboard ease accinidatuib visual display enable user few difficulty program addition high medium experience group rate situation equally positively compare low experience group medium experience group like program likely want buy program report motivated experiment experience uniformly increase response particular program particular word processing program study appear appeal strongly medium experienced user Discussion combined global detailed documentation seene facilitate learning understand positive evaluation documentation accomplish cost require nore initial reading time documentation global documentation clearly inadequate detailed level documentation add global level perceive understanding comprehension general program significantly increase Level experience affect learn documentation evaluation documentation general reaction program experiment time require read document solve problem surprisingly medium experience group react program positively term behavior increase experience allow user adapt easily computerized environment read documentation quickly solve problem quickly type documentation level experience common unique effect psychological behavioral aspect computer use factor interact significantly analyse study important conclusion study well documentation strongly influence person reaction documentation affect person reaction program computer environment psychological effect change documentation study localize specific documentation Reactions documentation program conputer environment depend level experience important application basic result diagnose particular problem use computer system amenable inprovement documentation system increase training user system type intervention choice intervention base demonstrate connection intervention particular problem computer system intervention apt fail second user react well documentation combine overall structure functional arrangement program detailed step step instruction use program base aspect result documentation carefully design include integrate section give functional overview program work component give detailed information key press obtain desire result section integrate person effectively overall program structure specific behavior perform finally lack interaction type documentation level experience implication performance enhance increase quality documentation experience level user effect improve documentation increase level experience user additive interactive suggest experienced people perform well experienced people well documentation well regardless experience well documentation facilitate basic psychological principle learn memory common person regardless programming experience case principle documentation design borrow research result human learning memory general translation result judiciously work human learning memory far simple stimulus typical computer program
8,1986,abstract great interest recently system use graphic aid programming debug understanding computer nrogram term Visual Programming    Rogram sualixation apply system renew interest example help alleviate complexity programming technique call Programming Example paper attempt provide mean term give precise definition use definition classify exist system taxonomy number common unsolved problem system list CR Categories Subject Descriptors D12 Software Engineering Automatic Programming D22 Software Engineering Tools Techniques Flowcharts D25 Software Engineering Testing Debugging Debugging Aids D32 Programming Languages Language Classifications 122 Artificial Intelligence Automatic Programming Program Synthesis 136 Computer Graphics Methodologies Techniques Languages Additional Key Words Phrases Visual Rogram    ming Program Visualization Programming Example inference permission copy feeall material grant provide copy distribute direct commercial advantagethe acm copyright notice title publication date appear notice give copying permission Association Computing Machinery 0 1986 ACM O 8979I    6860400    0059 0075 1 introduction distribution personal computer powerful personal workstation grow majority computer user know program buy computer package software able modify software small change order allow end user reconfigure modify system software provide option system complex address user problem Easy touse software direct Manipulation system Shneiderman 831 actually user programmer gap bad people able use software easy use internal program code complicate extra code handle user interface system move direction provide end user programming wellknown conventional programming language difficult learn use Gould 841 require skill people attempt programming task easy recent research direct graphic call Visual Programming Graphical Ro    gramme Visual Programming system successfully demonstrate nonprogrammer create fairly complex program little train halbert 841 motivation graphic tend high level description desire action deemphasize issue syntax provide high level abstraction programming task easy professional programmer especially true debug graphic present information program state current variable datum structure possible purelytextual display goal Program Visualization Ro gram Visualization system use graphic help teach computer programming Programming Example technology investigate programming easier especially nonprogrammer involve present computer example data program suppose process example development program Programming Example system Visual Programming technology link recently large number article system incorporate feature Grafton 851lraeder 851 unfortunately term imprecisely comprehensive taxonomy classifie system paper attempt fill gap literature important term define precise manner definition differentiate system finally number common unsolved problem system delineate system include paper category attempt comprehensive hope selection system list help reader understand intent cJassiation system 2 Definitions Programming mean computer programming probably understand important definition eliminate limited system paper program define set statement submit unit computer system direct behavior system Oxford 831 ability compute require system include ability handle conditional iteration implicitly interactive vs Batch programming language system Gneractive batch batch system large processing delay statement run compile interactive system allow statement execute enter characterization actually continuum dichotomy interactive language like lisp typically require group statement entire procedure specify execute Visual Programming Visual Programming VP refer system allow user specify program morel dimensional fashion conventional textual language consider dimensional compiler interpreter process long dimensional stream Visual Programming include conventional flow chart graphical programming language include system use conventional linear programming language define picture eliminate graphic editor like Sketchpad Sutherland 631 Program Visualization Program Visualization PV entirely different concept Visual Programming Visual Programming graphic program Program Visualization program specify conventional textual manner graphic illustrate aspect program runtime execution unfortunately past Program Visualization system incorrectly label Visual Programming Grafton 851 Program Visualization system divide axis illustrate code datum program dynamic static Dynamic refer system animation program run static system limited snapshot program certain point program create Visual Programming display debug clearly graphical manner consider Program Visualization term similar confusing ifor example Zloofs Query Example system section 42 Programming Example system widely literature feel appropriate continue use common term program bv Example term Programming Example PBE describe large variety system early system attempt create entire program set input output pair system require user work algorithm number example system try infer general program structure call fautomatic programming generally area Artificial Intelligence research recently number system require user specify program inference involve user work program specific example system execute user command normally remember later reuse Bill Buxton coin phrase Programming Examples accurately describe system halbert 1841characterize Programming example inferential Programming Example mean term Programming Example include inference system Programming Example system course code execute system test datum enter run distinction normal testing Programming Examples system require encourage specification example programming begin apply program develop example essentially require Programming Example system Programming Example system inference interactive 3 Advantages Graphics Examples Visual Programming Program Visualization Programming Example appealing idea number reason human visual system human visual information processing clearly optimize multidimensional datum Computer program present dimensional textual form utilize power brain dimensional display program flowchart indent block structure program long know helpful aid program understand smith 771 recently number Program Visualization system Myers bOBaecker 81llbrown 841 demonstrate 2 D pictorial display data structure draw band blackboard helpful clear visual style programming easy understand generate human Smith i771 discuss length psychological motivation visual display program datum know people well deal specific example abstract idea large teaching achieve present important example have student specific problem helps understand general principle Programming Example attempt extend idea programming ideal case programmer act like teacher give example computer computer like intelligent pupil intuit abstraction cover example CH186Proceedings programming example system require programmer specify abstraction allow work program example aid get program correct motivated observation people few error work problem example directly manipulate datum edit text move icon Macintosh Williams 841 compare perform operation abstract conventional programming programmer need try mind large complex state system point computation display screen call programming debugging mode Smith 771 addition PBE system allow user specify program actual user interface system presumably familiar Attardi 821 4 Taxonomy Programming Systems paper present taxonomy section discuss system support programming section 5 discuss system use graphic programming process finish Program Visualization system meaningful taxonomy create classify programming system category orthogonal criterion Visual Programming Programming Example interactive batch taxonomy original paper course single system feature fit category system hard classify paper attempt characterize system prominent feature figure 1 show division sample system discuss follow section 41 VP PBE Butch interactive conventional textual linear programming language familiar programmer Pascal Fortran Ada batch lisp APL interactive 42 VP PBE Butch early visual representation program flowchart Grail Ellis 691 compile program directly computerize flowchart content box ordinary machine language statement GAL Figure 2 similar use Nassi Shneiderman flowchart Nassi 731 compile Pascal Albiauri Romero 841 early effort AMBITG Christensen 681 ambitll Christensen 711 graphical language support symbolic manipulation programming picture program datum represent diagrammatically direct graph program operate pattern match fairly complicated algorithms garbage collection describe graphically local transformation graphs2 21 t interesting note AMBlTIG develop 1969 modem user interface technique include iconic representation gesture recognition dynamic menus screen selection menus selection icon point moded mode free style interaction etc Rower 691 Programming Example Batch Conventional Languages Pascal Fortran etc Interactive lisp APL etc Graphical Program Editor Sutherland 661 PIGS Pang 831 Query Example Zloof 77 811 FORMAL Pitt     Glinart 841 prograph wu 851 Pietrzykowski 83841 GAL State Transition UIMS Albizuri Romero 841 Jacob 851 Programming Example Batch Interactive IO pair Shaw 751 Tinker Lieberman 821 Bauer 781traces AutoProgrammer Biermann 76bl Pygmalion Smith 771 Graphical Thinglab Borning 861 SmallStar Halbert 81841 Rehearsal World Gould 841 Classification programming system visu    figure 1 al Programming Example interactive batch small number refer section group discuss Starred system inference non star PBE system use Ro    gramme Example Figure 2 Nassi Shneiderman flowchart program GAL Albizuri    Romero 841 think system call Query Example Programming Example system fact accord classification Query Example QBE Zloof 771 allow user specify query relational database dimensional table form classify Visual Programming system example QBE Zloof call variable call example user suppose name refer system fill field mean variable name conventional language idea qbe extend mail non database area office automation Office Example OBE Zloof 811 relate form base database language FORMAL Shu 851 explicitly represent hierarchical structure 43 VP PBE Interactive Probably Visual Programming system William Sutherlands represent program somewhat like hardware logic diagram system programming flowchart interactive PIGS Pang 831 use Nassi Shneiderman flowchart Pitt Glinert 841 use conventional flowchart Pitt differentiate use color picture icon text inside flowchart box figure 3 frame Pitt Glinert 841 show implementation factorial procedure original picture color prograph Pietrzykowski 831 interactive VP system PBE distinguish supportr ing functional datum flow language prograph attempt overcome problem type language graphical representation structure show figure 4 Pietrzykowski 1841 claim alleviate problem functional language conventional representation form linear script make unreadable prograph truly concurrent Visual Programming system 46 VP PBE Batch inference system attempt cover wide figure 4 procedure PROGRAPH Pietrzykowski 841 number system automatically generate user interface program User Interface Management Systems allow designer specify user interface graphical manner example state transition diagram editor Jacob 1851 Figure 5 UIMSs require designer specify program textual representation qualify Visual Programming cii186proceeding April 1986 Figure 5 State diagram description simple desk calculator Jacob 851 44 VP PBE Batch system attempt infer entire program example output produce particular input program Shaw 751 infer simple recursive lisp program single IO pair b c d d d C C B B system limit simple list processing program clear system generate program likely generate correct program Biermann 76al 45 VP PBE Znteractioe Tinker Lieberman 821 pictorial system VP user choose concrete example system execute lisp statement example code type Tinker use window menus graphic user interface VP system user present code system conventional linear textual manner class program generate IO pair require user choose datum structure algorithm run computation number example system attempt infer loop conditional produce short general program work example system Bauer decide value program constant variable visual user specify program execution graphical trace 47 VP PBE interactive interesting system fall final category AutoProgrammer Biermann 76bj similar Bauers system section 46 attempt inference Pygmalion Smith 771 seminal VP PBE system provide iconic analogical method programming concrete display image datum ch186proceeding April 1986 program call icon manipulate create program emphasis pictorially tell Thinglab Borning 79 811 design aliow user describe run complex simulation easily VP interface Thinglab describe Borning 861 user define new constraint object specify graphically figure 6 class object create combine exist object program example visually Thinglab Figure 6 creating constraint graphically bar graph size value register Thinglab Borning 861 SmallStar Halbert 81 841 use PBE allow end user program prototype version Star Smith 821 office workstation programming user simply go program mode perform operation remember leave program mode operation execute actual user interface system user know system use inference user differentiate constant variable explicitly add control structure loop conditional Halbert report Star user able create procedure perform office task system goal Rehearsal World allow teacher know program create computerized lesson easily Gould 841 interactive graphic heavily provide collaborative evolutionary exploratory environment programming quick easy fun metaphor present user theater screen stage predefine performer user direct create play figure 7 teacher develop program see point exactly student user play addition teacher additional performer wing YO student provide auxiliary function flow control visible teacher allow think concrete abstract conventional programming environment new performer need code create example possible Smalltalk code write static representation performer Smalltalk code edit know Figure 7 screen Rehearsal World Gould 841 show basic menu leave standard set performer 5 Taxonomy Program Visualization Systems system discuss section programming system code create conventional manner Graphics illustrate aspect program write Figure 8 show Program Visualization system classify attempt illustrate code datum program provide display static dynamic Code Data Static Flowcharts Haibt 591 Visual Compiler Baecker 861 PegaSys Moriconi 851 TX2 Display Files Baecker 681 Incense Myers 80831 Dynamic BALSA Brown 841 PV Prototype Brown 851 Systems Baecker 751 Sorting Sorting Baecker 811 BALSA Brown 841 Animation Kit London 851 PV Prototype Brown 851 Figure 8 Classification Program Visuahzation Systems illustrate code data dynamic static small number refer section group discuss 51 Static code visualization early example visualization undoubtably flowchart early 1959 program automatically create graphical flowchart Fortran assembly language program Haibt 591 modern static system Baecker 861 attempt add multiple font nice format graphic code easier read figure 9     ch186proceeding April 1986 char iIll Whk c geldI t 11 c w trilnnnmbr c 66 c 0 c 9 retUrn c sol c Gelr7anvmbcr y c gelchar D 66 c 3 s c sil c c gelchar 0 66 c 9 ri c figure 9 sample format program code Baecker 861 PegaSys Moriconi 851 picture formal documentation program draw user check system ensure syntactically meaningful extent agree program program enter conventional language Ada 52 dynamic code visualization system class animate code dynamically part code execute program run sort highlight Examples Brown 841 Brown 851 discuss section 54 53 static data visualization early system tx 2 computer produce static picture display file aid debug Baecker 681 Incense Myers 80 831 automatically generate static pictorial display data structure picture include curved line arrowhead pointer stack box array record user define display figure 10 goal make debug easy present datum structure programmer way draw hand paper figure 10 display produce automatically Incense 3 record contain pointer Myers 801 54 dynamic data visualization system class actually fall dynamic static computer system design create movie datum structure algorithm eg sort teach computer science Baecker 751lbaecker 811 system produce animation real time movie frame frame Balsa system Brown University Brown 841 design teach student programming produce illustration real time personal workstation PV Prototype Brown 851 design aid debug program understanding support dynamic display data easy construction user define display system similar goal writr Smalltalk feature smooth transition state London 851 6 Areas Future Research system attractive number reason successfully share number unsolved problem fruitful area future research 61 Visual Programming Difficulty large program large datum visual representation physically large text replace problem little fit screen problem alleviate extent scroll abstraction Lack functionality VP system work limited domain Inefficiency VP system run program slowly unstructured program VP system promote unstructured programming practice like GOTO hot provide abstraction mechanism procedure local variable etc necessary program reasonable size Static representation program hard understand flowchart AMBIT similar system program begin look like maze wire Rehearsal World similar system static representation simply normal linear code place comment interesting point virtually VP system provide place comment 62 Inferential Programming Example major problem system user provide guidance structure program new example radically change program programmer know example value variable constant conditional way directly convey information system choose correct example require great skill difficult system modify program exist generate procedure convolute unstructured Bauer 78 p 1311 user sure generate procedure correct read code check explicitly require advantage PBE lose user know program order check fact central idea inductive generalization programming directly oppose modern software engineering idea testing example guarantee program correct clearly generate program example problem 63 Programming Example Programming Example system attempt inference successful VP system share problem list section 61 additional problem system Halbert 841 include Lack static representation system user understandable static representation program Problem edit program lack static representation make edit difficult alternative run program begin long time specify change middle program example possible running begin state world set correctly allow user specify change save periodic snapshot system state alleviate problem great deal information save addition change invalidate step program come Problem data description difficult specify procedure operate constant user specify datum datum find system qualified type location etc explicit mechanism user tell system know user choose particular datum user specify datum item different place coincidence identical item place Problem control structure specify conditional example branch travel travel branch different example give system return correct state statement reevaluate additional problem specify program conditional loop place Lack functionality system provide Programming Example datum type small number operation patch provide escape conventional programming language PBE insufficient avoid destruction real datum undesirable consequence environment office action system external consequence undesirable system actually perform certain action program write 64 Program Visualization Data Visualization system follow problem difficult pick appropriate picture datum abstraction picture choose usually require great deal programming system produce picture datum usually large difficult fit screen related layout problem decide place differently shape dimensional picture arrow line connect dynamic datum visualization difficult specify display update Issues aesthetic time important produce useful animation code separate set problem work interesting display way progress like visual system problem size picture Ways find decide code display compress procedure fit screen code datum animate difficult user tell datum manipulate part code way find relationship variable display datum 7 Conclusion Visual Programming Programming Example Program Visualization exciting area active computer science research promise improve user interface programming environment number interesting system create area cross boundary paper attempt classify system present general problem hope clarify use term provide context future research acknowledgement helu suooort article like thank Bill Buxton Ron Baecker Bernita Mye University Toronto research describe paper partially fund National Science Engineering Research Council NSERC Canada
9,1985,abstract effect video display unit presentation rate reading performance investigate reading material present follow presentation rate 15 30 120 960 cps instant instant condition text appear simultaneously screen condition text appear character time start upper left corner screen leave right reading comprehension high 30 cps instant presentation condition Tot al t fo rm read ng task equivalent condition 15 cps rate require long time complete task term comprehension time perform task slow rate 15 cps contrary previous recommendation desirable novice computer user introduction consequence increase use computer need read information video display unit vdu need know effect different VDU presentation parameter performance variable read comprehension read speed Shneiderman 1982 remark novice accurate performance high satisfaction slow display rate 15 25 characterssecond Bevan 1981 p 240 conclusion actually draw Bevan restrictive Shneiderman report Bevan 1981 conclude optimal VDU text presentation rate probably slightly low 15 cps characterssecond danger present material slightly fast read speed lead particularly high error rate p 71 encourage designer drastic step degrad1n system performance attempt improve accu racy sit sf act novice use rs s desirable replicate Bevan result present study investigate effect VDU text presentation rate reading comprehension read speed make modification Bevans 1981 experimental design modification include important extension presentation rate 15 30 120 960 cps 150 300 1200 9600 baud condition display text VDU screen movement text screen condition close presentation text print page sequential presentation text second contrast Bevan experiment subject test presentation rate subject read text present rate Testing subject rate eliminate contrast presentation rate previously experiment make possible study practice effect straightforward fashion important determine difference find initial exposure text presentation rate hold experience rate Procedure Subjects subject study 90 volunteer undergraduate psychology student 68 female 22 male participate course credit 47 previous experience VDU screen 75 experience recreational user read test material Nelson Denny Reading Test Brown Bennett Hanna 1981 widely read test grade adult level comprehension subt recent form Nelson Denny test Forms E F administer subject individual experimental session form e randomly choose pretest al 1 subject present paper accord standard administration protocol Brown Bennett Hanna 1981 follow pret Form e part Form F administer subject Zenith Data Systems Model ZVM 121 VDU drive micro    APRIL 1985 computer VDU screen display 24 line text 80 mixed case character line line text fill fully possible break word line single space standard keyboard position VDU form comprehension subt contain passage 36 question passage form 630 word long accompany question remain seven passage form approximately half length accompany qJestions complete Form e pretest vdu test passage Form F omit length precluded presentation single VDU screen seven passage Form F fill approximately 75 screen seven passage form fuse VDU condition form pair seemingly equal difficulty control difference pair passage order presentation pair counterbalance subject aid 3 3 randomize latin square Kirk 1982 Performance comprehension question associate pair passage treat single score aid investigation learning effect VDU treatment seventh passage present begin VDU test half subject end test half comprehension question associate passage design 90 subject randomly assign level text presentation rate VDU condition rate read passage presentation 15 30 120 960 cps instant nominal rate actual time rate appearance character screen 15 30 133 860 cps instant level word read passage appear VDU screen simultaneously ln condition text begin appear upper left corner screen character time assign rate 15 cps rate half normal adult read speed 25 30 cps 30 cps rate normal adult read speed rate 120 960 cps far normal adult read speed exception pretest form e standard paper pencil test passage present VDU VDU passage question associate passage present print page available subject read passage subject arke answer page presentation passage VDU question print separate page problematic subject require shift attention JU screen page question tlie screen potential disadvantage ias offset el mi nation need subject learn mark change answer interactively 8ecause interaction computer rinimize read major task experiment difference performance unambiguously attribute difference reading comprehension Standard instruction comprehension subt Nelson Denny test wit instruction mark answer use VDU present subject print page prior presentation passage screen subject read information screen prior begin VDU base comprehension test instruction inform subject read passage display screen VDU passage remain screen subject ready display screen thought page normal text print paper subject instruct indicate finish read passage press specially label TIME key indicate readiness read passage press specially label key keyboard task require subject allow work subt completion VDU condition tell test like previous paper pencil version time third subject unable complete paper version time allow motivated speedily work subtest completion VDU administer subtest subject complete questionnaire measure computer experience anxiety questionnaire undergo development laboratory reliability anxiety scale questionnaire high alpha 92 total length experimental session approximately hour result mean reading comprehension read speed calculate comprehension subt Form e Nelson Denny Reading Test paper test give subject VDU treatment mean comprehension score 245 maximum possible score 36 680 mean reading rate 285 wordsminute assume charactersword mean reading rate equivalent approximately 24 cp significant difference pretest score different VDU presentation rate group Data collect subject read VDU screen analyze pretest comprehension speed score covariate analysis covariance technique take account individual ability subject measure pretest improve sensitivity datum analysis analysis covariance customary report adjust mean group study adjusted mean predict group mean pretest measure equal pretest difference APRIL 1985 0 0 0aw 9600 instant condition Figure 1 Comprehension percent correct 28 question presentation rate find group study obtain adjusted mean identical unadjusted mean report Figure 1 show percentage correct answer VDU comprehension test function text presentation rate difference significant f483 315 p 05 comprehension high subject 30 cps instant group pair comparison Newman Keuls procedure show comprehension score subject 30 cps group significantly high subject 15 960 cps group p 05 comprehension score subject instant group marginally high subject 15 960 cps group p 10 Mean working time time require read passage answer question present row Table 1 signficant difference time f483 1372 p 001 high value obtain 15 cps presentation rate significant difference find presentation rate group finding suggest 15 cps rate low reading speed subject subject group wait text appear VDU screen second row Table 1 mean time require presentation passage show note presentation time passage instant condition o minute pause text appear VDU screen equal presentation time 960 cps condition table 1 Time minute function text presentation rate Text presentation rate cps measure 15 30 120 total time 288 23 7 222 Display 115 51 12 time 960 instant 223 230 APRIL 1985 Iuw    90 0 0 80 w u 0w 60      second 9600 instant condition Figure 2 Comprehension percent correct 8 question second pair passage presentation rate row Table 1 display mean networking time work time presentation time significant difference mean f483 1023 p 001 subject read presentation rate 15 30 cps obtain shortest networking time indicate reading passage text present Scores standardized computer anxiety test administer questionnaire end experimental session examine significant difference presentation rate group difference anxiety level find group Figure 2 show mean comprehension score pair passage order present practice effect practice presentation rate interaction significant general relationship presentation rate comprehension find practice interval order determine comprehension performance improve time comparison comprehension score subject read seventh passage present begin VDU test score read seventh passage end test result show Figure 3 significant presentation rate placement interaction f478 357 p 05 indicate effect practice depend presentation rate significant interaction primarily reflect fact performance subject 120 cps group read seventh passage present begin VDU test relatively poor subject presentation rate condition true performance subject 120 cps group read seventh passage end VDU test unusually low performance 120 cps attribute warm effect indicate 120 cps presentation rate lead poor initial strategy later correct Discussion result present study clearly comprehension material vdu affect text presentation rate general comprehension well intermediate presentation rate 30 cps less APRIL 1985    begin test oa END TEST 0 0 0 1z     70 60 aw 9600 instant condition Figure 3 Comprehension percent correct 4 question seventh passage present begin end test presentation rate extent 120 cps low 15 cps high 960 cps rate Comprehension rate 30 cps 120 cps close obtain instant display condition word passage appear simultaneously presentation rate effect comprehension consistent passage Working time affect presentation rate 15 cps presentation rate subject read speed intriguing aspect result nonmonotonic relationship presentation rate reading comprehension review read VDUs Waern Rollengagen 1982 assume read easy like read print page text present page time quickly possible p 449 statement imply read performance increase presentation rate increase consistent evidence study eye movement normally occur read Rayner 1978 review eye movement evidence suggest time spend fixate word represent information processing time require perception comprehension base assumption theory read attempt predict eye fixation time basis reading model eg Carpenter 1980 Carrithers Bever 1984 basis model appear condition divert eye normal reading movement lead decrease reading comprehension effect minimize text appear fast rate contrast prediction Bevans 1981 datum presentation rate show generally increase error fast presentation speed nonmonotonicity occur 18 cps high error rate speed result Bevan conclude danger present material slightly fast read speed lead particularly high error rate p 76 Bevan basis statement measure reading rate include read time material time require answer question direct measure time spend reading obtain Bevan performance well 10 cp 30 cps Bevan study opposite effect obtain present study likely APRIL 1985 difference difference read ability report score Nelson Denny pretest comparable study Bevans suggestion presentation rate keep read rate inexperienced user support present study variable account effect presentation rate VDU comprehension plausible explanation result study presentation rate affect subject choice working strategy subject adopt work strategy base nature task work condition read task subject strive speed accuracy strategy example subject try read text appear wait passage complete addition scan text read question confirm answer refer text read question try find answer text read thoroughly hypothesis subject choice working strategy influence text presentation rate 150 960 cps condition lead selection suboptimal strategy strategy choice refer Waern Rollenhagen 1982 metacognition conscious decision start proceed end reading process conscious evaluation reading outcome p 455 work strategy hypothesis account discrepancy result present study result Bevans 1981 study 15 cps condition Bevan find well comprehension presentation rate high rate performance rate present study poor present study definite time pressure subject consider take standard reading comprehension test case Bevan study standard computer assist instruction task present study likely subject 15 cps group feel hold low presentation rate concern perceive time constraint take shortcut compensate lose time example choose continue passage confirm answer addition Bevans experimental situation interactive present situation user feel hurried high presentation rate appear computer wait response strategy selection hypothesis correct VDU text presentation rate task factor affect performance task factor interact presentation rate performance unknown possible different task eg word process opposed programming differentially influence presentation rate note Carpenter 1980 NThere single mode read Reading vary function read reading read reader goal important determinant reading process p 350 view complexity premature recommend slow presentation rate novices caution require generalizing result study mean result ignore study reading comprehension affect complex way presentation rate situation information read video display quickly comprehend act grow eg process monitor control person little use computer increasingly ask read information vdu decision basis information example concern quality proofread VDU screen Wright Lickorish 1983 journalism publishing work time constraint practice proofread directly fr001 screen common situation use appropriate presentation rate insure optimal comprehension decrease error rate increase usefulness system
